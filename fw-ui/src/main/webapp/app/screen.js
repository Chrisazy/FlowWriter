/*
   (c) Copyright 2012 Hewlett-Packard Development Company, L.P.
   Autogenerated
   */

// JSLint directive...
/*global $: false*/

(function (api) {
  'use strict';

  //framework APIs
  var fn_api = api.fn,       // general API
      def_api = api.def,     // application definition API
      view_api = api.view;   // view API

  // snap-in libs
  var tags_api = api.lib.htmlTags,         // HTML Tags API Library
      widget_api = api.lib.widgetFactory;  // Widget Factory API Library

  var IP_field1,       // Global declaration of the five fields
      IP_field2,       // so values can be accesses in the load function.
      port_field1,     // These values correspond to the four
      port_field2,     // text fields in the view.
      protocol_field;  // Probably not the best method, but I don't know JavaScript

  var monitoringStarted = 0; // Same as above, needed for accessing in multiple functions

  var jsonObject;

  fn_api.trace('including screen.js');

  // Creates a dialog box function (Calling this function with certain parameters displays a dialog box with specific text)
  // See the load function for sample functionality
  function dlg(view, titleKey, text) {
      var dlgDiv = tags_api.div({
              attr: {
                  id: view.mkId('dlg'),
                  title: view.lion(titleKey)
              }
          }).append(tags_api.p(text)),
          $dlg = dlgDiv.domFrag(),
          actions = {};
 
      actions[view.lion('close')] = function () {
          $(this).dialog("close").dialog('destroy');
      };
 
      $dlg.dialog({
          width: 600,
          buttons: actions
      });
  }
  

  // The create functon (Creates the central text, 'Enter Required Information,' and the four text fields)
  function create(view) {
    // Sample Text Field (Consult SKI Framework Reference for more information)
    //
    // sample_field = widget_api.textField({
    //   label: 'Label Text Here',
    //   ph: 'Text inside of the text box',
    //   icon: 'icon name here'
    // });

    // First IP Field
    IP_field1 = widget_api.textField({
      label: 'IP 1:',
      ph: 'Enter IP 1',
    });

    // Second IP Field
    IP_field2 = widget_api.textField({
      label: 'IP 2:',
      ph: 'Enter IP 2',
    });

    // First Port Field
    port_field1 = widget_api.textField({
      label: 'Port 1:',
      ph: 'Enter Port 1',
    });

    // Second Port Field
    port_field2 = widget_api.textField({
      label: 'Port 2:',
      ph: 'Enter Port 2'
    });

    // Protocol Field
    protocol_field = widget_api.textField({
      label: 'TCP/UDP/Both',
      ph: 'Enter Protocol'
    });

    // Create a text field, a column of IP_field text fields, a column of port_field text fields, and a protocol_field text field
    var div = tags_api.div({cls: 'textView'}).append(tags_api.h2('Enter Required Information')),
        row1 = tags_api.div({css: {margin: 45}}).append(IP_field1, IP_field2),
        row2 = tags_api.div({css: {margin: 45}}).append(port_field1, port_field2),
        row3 = tags_api.div({css: {margin: 45}}).append(protocol_field);
    
    // Append the three created columns to the text, and return the final object
    return div.append(row1).append(row2).append(row3);
  }


  // The load function (Set the toolbar with the Start and Stop buttons)
  function load(view) {
    var lion = view.lion;

    // Sets the toolbar with two buttons
    // tbStart and tbStop values can be found in screen.properties
    view_api.setToolbar(

        // Start button, used to start the monitoring of conversations
        widget_api.button({
          icon: 'play',
          text: lion('tbStart'),
          click: function () {

            // Grab the values from the fields
            var IP_f1 = IP_field1.value(),
                IP_f2 = IP_field2.value(),
                p_f1 = port_field1.value(),
                p_f2 = port_field2.value(),
                pr_f = protocol_field.value();

            if(monitoringStarted == 0)
            {
              // Check if the IP Addresses are valid (Regex from online)
              if(!/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(IP_f1)
                  || !/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(IP_f2))
              {
                dlg(view, 'incorrectIP', 'IP Addresses must range from 0.0.0.0 to 255.255.255.255');
              }
              // Check if the ports are valid
              else if(isNaN(p_f1) || isNaN(p_f2))
              {
                dlg(view, 'incorrectPort', 'Port values must be numbers');
              }
              else if(p_f1 > 65535 || p_f2 > 65535 || p_f1 < 1 || p_f2 < 1)
              {
                dlg(view, 'incorrectPort', 'Port values must be between 1 and 65535');
              }
              // Check if the protocol is valid
              else if(pr_f != 'UDP' && pr_f != 'TCP' && pr_f != 'Both')
              {
                dlg(view, 'incorrectProtocol', 'Protocol must be TCP, UDP, or Both');
              }
              // All the values entered are valid
              else
              {
                monitoringStarted = 1;

                jsonObject = 
                {
                  ip1: IP_f1,
                  ip2: IP_f2,
                  port1: p_f1,
                  port2: p_f2
                  //protocol: pr_f
                };

                dlg(view, 'correctValues', 'Conversation monitoring has started.');

                // send values to the application
                $.post('/sdn/fw/v1.0/capture', jsonObject, function (data, status) {
                });
              }
            }
            else
            {
              dlg(view, 'errorStarted', 'Conversation monitoring in progress.');
            }
          }
        }),

        // Stop button, used to stop the monitoring of conversations
        widget_api.button({
          icon: 'stop',
          text: lion('tbStop'),
          click: function () {
            if(monitoringStarted == 1)
            {
              monitoringStarted = 0;

              dlg(view, 'monitoringStopped', 'Conversation monitoring has stopped.');

              // Tell the application to stop
              // Save to pcap?
              $.post('/sdn/fw/v1.0/capture/stop', jsonObject, function(data, status) {
              });
            }
            else
            {
              dlg(view, 'errorStopped', 'Conversation monitoring needs to be started.');
            }
          }
        })
    );
  }


  // Adds the view 'screen' with create and load functions create and load
  def_api.addView('screen', {
    create: create,
    load: load
  });
  
}(SKI));
