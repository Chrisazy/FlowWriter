/*
   (c) Copyright 2012 Hewlett-Packard Development Company, L.P.
   Autogenerated
   */

// JSLint directive...
/*global $: false*/

(function (api) {
  'use strict';

  //framework APIs
  var fn_api = api.fn,       //general API
      def_api = api.def,     //application definition API
      view_api = api.view;   //view API

  // snap-in libs
  var tags_api = api.lib.htmlTags,
      widget_api = api.lib.widgetFactory;
  
  fn_api.trace('including screen2.js');

  var wgtId = 0,
      mtTypes = [ 'ipDst', 'ipSrc', 'macDst', 'macSrc', 'vlanId' ],
      instTypes = [
        'clearActions', 'applyActions', 'writeActions', 'gotoTable'
      ],

      actionTypes = [
        'setIpSrc',
        'setIpDst',
        'setVlanId',
        'setUdpPort'
      ],

      gotoTypes = [ 'nextTableId' ],
      ft;

  function lionFromArray (lion, a) {
    var labels = [];
    $.safeEach(a, function (i, v) {
      labels.push(lion(v));
    });
    return labels;
  }

  function createMatchTable (view, rd, idx, editMode) {
    var lion = view.lion,
        table,
        columns = [
        {
          field: 'key',
          name: lion('mtType'),
          width: 90,
          invalidates: [ 'value' ],
          renderer: function (value, sliceInfo) {
            return lion(value);
          },
          editor: function (value, sliceInfo) {
            return widget_api.selectBox({
              id: view.mkId('mt') + wgtId++,
              values: mtTypes,
              value: value,
              width: 90,
              labels: lionFromArray(lion, mtTypes),
              change: function () {
                table.updateSlice(sliceInfo, {
                  key: this.value(),
                  value: ''
                });
              }
            });
          }
        },
        {
          field: 'value',
          name: lion('mtValue'),
          editor: function (value, sliceInfo) {
            return widget_api.textField({value: value});
          }
        }
    ];

    table = widget_api.sliceTable({
      columns: columns,
      edit: {
        active: editMode,
        add: {text: lion('instAdd')},
        remove: {text: lion('instRemove')}
      }
    });
    return table;
  }
  
  // TODO
  function createInstTable (view, rd, idx, editMode) {
    var lion = view.lion,
        table,
        columns = [
        {
          field: 'inst',
          name: lion('instType'),
          width: 120,
          invalidates: [ 'action', 'value' ],
          renderer: function (value, sliceInfo) {
            return lion(value);
          },
          editor: function (value, sliceInfo) {
            return widget_api.selectBox({
              id: view.mkId('inst') + wgtId++,
              values: instTypes,
              value: value,
              width: 120,
              labels: lionFromArray(lion, instTypes),
              change: function () {
                table.updateSlice(sliceInfo, {
                  inst: this.value(),
                  value: ''
                });
              }
            });
          }
        },
        {
          field: 'action',
          name: lion('instAction'),
          width: 120,
          invalidates: [ 'value' ],
          renderer: function (value, sliceInfo) {
            return lion(value);
          },
          editor: function (value, sliceInfo) {
            var rowData = sliceInfo.rowData();
            if(rowData.inst === 'gotoTable') {
              return tags_api.span(lion('setTableId'));
            } else {
              return widget_api.selectBox({
                id: view.mkId('instact') + wgtId++,
                values: actionTypes,
                value: value,
                width: 120,
                labels: lionFromArray(lion, actionTypes),
                change: function () {
                  table.updateSlice(sliceInfo, {
                    action: this.value()
                  });
                }
              });
            }
          }
        },
        {
          field: 'value',
          name: lion('instValue'),
          editor: function (value, sliceInfo) {
            return widget_api.textField({value: value});
          }
        }
    ];

    table = widget_api.sliceTable({
      columns: columns,
      edit: {
        active: editMode,
        add: {text: lion('instAdd')},
        remove: {text: lion('instRemove')}
      }
    });
    return table;
  }


  function ftShowDetail (view, rd, idx, editMode) {
    var lion = view.lion,
        div = tags_api.div({
          cls: 'ui-corner-all',
          css: {
            margin: '0 0 30px 30px',
            backgroundColor: '#3d3d3d'
          }
        }),
        mTable = createMatchTable(view, rd, idx, editMode),
        iTable = createInstTable(view, rd, idx, editMode),
        iTimeOutWgt,
        hTimeOutWgt;

    mTable.domFrag().css({width: 300, float: 'left', padding: 4});
    iTable.domFrag().css({width: 500, float: 'left', padding: 4});

    div.append(mTable);
    div.append(iTable);

    iTimeOutWgt = widget_api.textField({
      label: lion('idleTimeOut'),
      disable: !editMode
    });

    hTimeOutWgt = widget_api.textField({
      label: lion('hardTimeOut'),
      disable: !editMode
    });

    div.append(tags_api.div({css: {clear: 'both'}})
        .append(iTimeOutWgt).append(hTimeOutWgt));

    $.getJSON('rs/flowEntry/' + idx, function (data) {
      mTable.slices(data.matches);
      iTable.slices(data.instructs);
      iTimeOutWgt.value(data.iTimeOut);
      hTimeOutWgt.value(data.hTimeOut);
    });

    return div;
  }

  function create (view) {
    var lion = view.lion,
        div = tags_api.div();

    var ftColumns = [
      {
        field: 'match',
        name: lion('ftMatch')
      },
      {
        field: 'inst',
        name: lion('ftInst')
      },
      {
        field: 'iTimeOut',
        name: lion('ftIdleTimeOut'),
        width: 60,
        textAlign: 'right'
      },
      {
        field: 'hTimeOut',
        name: lion('ftHardTimeOut'),
        width: 60,
        textAlign: 'right'
      }
    ];

    ft = widget_api.sliceTable({
      columns: ftColumns,
      baseSliceCssClasses: ' border shadow ',
      on: {
        show: function (rd, idx, edit) {
          return ftShowDetail(view, rd, idx, edit);
        }
      },
      edit: {
        add: {text: lion('ftAdd')},
        remove: {text: lion('ftRemove')},
        drag: {text: lion('ftDrag')}
      }
    });

    div.append(ft);

    return div;
  }

  function dlg (view, titleKey, text) {
    var dlgDiv = tags_api.div( {
      attr: {
        id: view.mkId('dlg'),
        title: view.lion(titleKey)
      }
    }).append(tags_api.p(text)),
        $dlg = dlgDiv.domFrag(),
        actions = {};
  
    actions[view.lion('close')] = function () {
      $(this).dialog("close").dialog('destroy');
    };
  
    $dlg.dialog({
      width: 600,
      buttons: actions
    });
  }

  function load (view) {
    var lion = view.lion;

    view_api.setToolbar(
      widget_api.button({
        text: lion('tbEdit'),
        click: function () { ft.edit(true); }
      }),
      widget_api.button({
        text: lion('tbSave'),
        click: function () { ft.edit(false); }
      }),
      def_api.tbSeparator(),
      widget_api.button({
        text: lion('tbTest'),
        click: function () { dlg(view, 'testDlg', 'This is where you could create a packet'); }
      }),
      def_api.tbSeparator(),
      widget_api.button({
        icon: 'play',
        text: lion('tbDeploy'),
        click: function () { dlg(view, 'deployDlg', 'This is where you could deploy a flow table'); }
      })
    );

  $.getJSON('rs/flowEntries', function (data) {
    ft.slices(data.rows);
    });
  }

  def_api.addView('screen2', {
    create: create,
    load: load
  });

}(SKI));
